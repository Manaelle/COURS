#!/bin/bash

# @author : Astor Bizard - astor.bizard@etu.univ-grenoble-alpes.fr

mv Makefile Makefile~ 2>/dev/null

echo "
###################################################
## This Makefile has been generated by gen_make  ##
###################################################
" > Makefile

if [ `ls *.c 2>/dev/null | wc -l` -ne 0 ]
then

	echo "
CC=gcc
CFLAGS=-Wall -Werror
LDFLAGS=

LIBS=

DBG_PREF=dbg_

ifeq (\$(MKFLDEBUG),1)
CFLAGS+=-g
PREFIX=\$(DBG_PREF)
endif
" >> Makefile

	# Compute executables
	for f in *.c
	do
		gcc -fpreprocessed -dD -E $f -o $f.uc
		if [ `grep -w "int main" $f.uc | wc -l` -eq 1 ]
		then
			base=`basename $f .c`
			exec="$base $exec"
			exec_pref="\$(PREFIX)$base $exec_pref"
			exec_dbg="\$(DBG_PREF)$base $exec_dbg"
		fi
	done
	for f in *.h
	do
		gcc -fpreprocessed -dD -E $f -o $f.uc
	done

	echo "EXEC=$exec_pref" >> Makefile
	echo "ALL_EXEC=$exec$exec_dbg" >> Makefile

	echo "
###################################################
################## Generic rules ##################

all: \$(EXEC)

debug:
	@export MKFLDEBUG=1 ; \\
	make all

\$(EXEC):% : %.o
	\$(CC) \$(CFLAGS) -o \$@ \$(LDFLAGS) \$^ \$(LIBS)

\$(PREFIX)%.o: %.c
	\$(CC) \$(CFLAGS) -o \$@ -c \$<

\$(patsubst %,\$(DBG_PREF)%,\$(EXEC)):% :
	@export MKFLDEBUG=1 ; \\
	make \$@

###################################################
################ Set dependencies #################
" >> Makefile

	# Searchs includes in $1.c and $1.h, returns dependencies in $hdeps
	function getHDeps(){
		if [ -e $1.c ]
		then
			if [ -e $1.h ]
			then
				_file=`cat -s $1.c.uc $1.h.uc`
			else
				_file=`cat -s $1.c.uc`
			fi
		elif [ -e $1.h ]
		then
			_file=`cat -s $1.h.uc`
		else
			echo "Failed to compute dependencies : file $1.c / $1.h not found !"
			return -1
		fi

		_hdeps_l=`echo "$_file" | grep "#include" | cut -s -f2 -d\"`
	
		_hdeps=
		for _dep in $_hdeps_l
		do
			if [ `echo $_hdeps | grep -w $_dep | wc -l` -eq 0 ]
			then
				_hdeps="$_dep $_hdeps"
			fi
		done

		hdeps=$_hdeps #`echo $_hdeps_l`
	}

	# Compute dependencies
	for f in *.c
	do
		base=`basename $f .c`
		getHDeps $base
		# write .h dependencies
		echo "\$(PREFIX)$base.o: $hdeps" >> Makefile

		odeps=
		if [ `echo $exec | grep -w "$base" | wc -l` -eq 1 ]
		then	# this file will lead to an executable
			odep_added=1
			hdeps_next_loop=$hdeps
			while [ $odep_added -ne 0 ]		# While there are new dependencies to be added
			do
				odep_added=0
				hdeps_loop=$hdeps_next_loop
				hdeps_next_loop=
				for dep in $hdeps_loop
				do
					depbase=`basename $dep .h`
					if [ -e $depbase.c ]
					then	# the .h file is related to a .c file, include the .o
						odep="\$(PREFIX)$depbase.o"
						if [ `echo $odeps | grep -w $odep | wc -l` -eq 0 ]
						then
							odeps="$odep $odeps"
							odep_added=`expr $odep_added + 1`
						fi
					fi
					# Get dependencies of the dependency, do them on next loop
					getHDeps $depbase
					hdeps_next_loop="$hdeps $hdeps_next_loop"
				done
			done

			echo "\$(PREFIX)$base: $odeps" >> Makefile
		fi
	done

	rm -f *.c.uc *.h.uc

	echo "
###################################################
###################### Clean ######################

clean:
	rm -f \$(ALL_EXEC) *.o

" >> Makefile

fi


echo "
###################################################
################## Other Formats ##################

%.tar: %
	tar -cvf \$@ \$<

%.tar.gz: %
	tar -cvzf \$@ \$<

%.pdf: %.tex
	pdflatex \$<" >> Makefile
